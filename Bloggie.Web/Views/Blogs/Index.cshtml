@using Microsoft.AspNetCore.Identity
@model Bloggie.Web.Models.ViewModels.BlogDetailsViewModel
@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager
@{
    ViewData["Title"] = Model.PageTitle;
}


<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-6">
            @if (Model != null)
            {
                <h1 class="mb-3">@Model.Heading</h1>
                <div class="d-flex justify-content-between mb-3">
                    <span class="text-secondary">@Model.Author</span>
                    <span class="text-secondary">@Model.PublishedDate.ToShortDateString()</span>
                </div>

                <div class="mb-3 " style="color: cornflowerblue; font-weight: 400; font-size: 20px">
                    @if (signInManager.IsSignedIn(User))
                    {
                        if (Model.Liked)
                        {
                            <a style="cursor: pointer">
                                <i class="bi bi-hand-thumbs-up-fill me-3" style="color: cornflowerblue"></i>
                            </a>
                        }
                        else
                        {
                            <a style="cursor: pointer" id="btnLike">
                                <i class="bi bi-hand-thumbs-up me-3" style="color: cornflowerblue"></i>
                            </a>
                        }

                        <span id="totalLikes">@Model.TotalLikes</span> <span>likes </span>
                    }
                </div>

                <div>
                    @foreach (var tag in Model.Tags)
                    {
                        <span class="badge bg-primary mb-3">@tag.Name</span>
                    }
                </div>
                <img src="@Model.FeaturedImageUrl" class="d-block img-fluid mb-3" />

                <div class="mb-3 blog-details-content">
                    @Html.Raw(Model.Content)
                </div>
            }
            else
            {
                <p>Blog post not found!</p>
            }
        </div>
    </div>
</div>

@section Scripts {

    <script>
        const btnLikeElement = document.getElementById("btnLike");
        const totalLikeElement = document.getElementById('totalLikes');

        async function getTotalLikes() {
            fetch('/api/BlogPostLike/@Model.Id/totalLikes', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                }
            }).then(data => data.json()).then(result => totalLikeElement.innerHTML = result);
        }

        async function addLikeForBlog() {
            fetch('/api/BlogPostLike/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({ blogPostId: '@Model.Id', userId: '@userManager.GetUserId(User)' })
            }).then(console.log('Request finished'));
            btnLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>';
            btnLikeElement.removeEventListener('click', addLikeForBlog);
            getTotalLikes();

        }

        btnLikeElement.addEventListener('click', addLikeForBlog);
    </script>


}